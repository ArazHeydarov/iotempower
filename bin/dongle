#!/usr/bin/env bash
# run different IoTempower esp dongle programs
#
# TODO: help
#

[ "$IOTEMPOWER_ACTIVE" = "yes" ] || { echo "IoTempower not active, aborting." 1>&2;exit 1; }

daemon_fifo=/var/tmp/iotempower_dongle
daemon_port="$daemon_fifo.port"

command="$1"
shift 1

function dongle_release() {
    if [[ -e "$daemon_fifo" ]]; then
        echo release > "$daemon_fifo" & # release serial
        sleep 0.5
    fi
}

function dongle_connect() {
    if [[ -e "$daemon_fifo" ]]; then
        echo connect > "$daemon_fifo" & # connect and resume daemon again
        sleep 0.5
    fi
}

if [[ "$command" = flash ]]; then
    dongle_release
    port=""
    port=$(cat "$daemon_port" 2>/dev/null)
    if [[ ! "$port" ]]; then
        port=/dev/$(find_esp_port "$2" nodongle)
    fi
    echo "Flashing dongle on port $port..."
    python3 "$IOTEMPOWER_ROOT/bin/dongle_display.py" -p "$port" \
        "Updating\\\\nfirmware...\\\\n\\\\nPlease wait."
    cd "$IOTEMPOWER_ROOT/lib/esp_dongle"
    export PLATFORMIO_UPLOAD_PORT="$port"
    platformio run -t upload
    result=$?
    if [[ "$result" -eq 0 ]]; then
        echo "Waiting 5s for reboot before reconnect..."
        sleep 5 # allow reboot
        echo "Successfully flashed dongle."
    else
        echo "Error compiling or flashing. Check errors."
    fi
    dongle_connect
    exit $result
elif [[ "$command" = daemon ]]; then
    if [[ -e "$daemon_fifo" ]]; then
        echo quit >"$daemon_fifo" & # stop old daemon
        sleep 0.5 # let it stop
        rm -f "$daemon_fifo" "$daemon_port"
    fi
    # probe where dongle is running
    echo "Searching dongle..."
    port=""
    ports=$(platformio device list --serial|egrep '^/dev/tty'|sort) # get available serial ports
    for p in $ports; do
        if dongle probe -p "$p"; then
            port="$p"
            break;
        fi
    done
    if [[ "$port" ]]; then
        echo "$port" > "$daemon_port"
        echo "Starting daemon on $port."
        mkfifo -m 600 "$daemon_fifo"
    #    python3 "$IOTEMPOWER_ROOT/bin/dongle_daemon.py" "$@" <"$daemon_fifo"
        # not sure why I have to use tail for the fifo and not <$daemon_fifo
        python3 "$IOTEMPOWER_ROOT/bin/dongle_daemon.py" -i "$daemon_fifo" -p "$port" "$@"
        rm -f "$daemon_fifo" "$daemon_port"
    else
        echo "Dongle not found."
        exit 1
    fi
elif [[ "$command" = quit ]]; then
    if [[ -e "$daemon_fifo" ]]; then
        echo "Sending quit to daemon."
        echo quit >"$daemon_fifo" & # stop old daemon
        sleep 0.5 # let it stop
        rm -f "$daemon_fifo" "$daemon_port" # should be already deleted
    fi
else
    dongle_release
    port=""
    port=$(cat "$daemon_port" 2>/dev/null)
    if [[ "$port" ]]; then
        python3 "$IOTEMPOWER_ROOT/bin/dongle_$command.py" -p "$port" "$@"
    else
        python3 "$IOTEMPOWER_ROOT/bin/dongle_$command.py" "$@"
    fi
    result=$?
    dongle_connect
    exit $result
fi
