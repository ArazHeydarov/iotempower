#!/bin/env python3
# original version generated by chat.gpt by these prompts:
#
# 1. I would like to run a redirecting web proxy as user on port 40080
# that allows me to reverse proxyunder the url prefix /nodered to a 
# local running node-red service on port 1880 and on /cloudcmd to the 
# locally running service cloud commander on port 8080. On the URL 
# without prefix I want to serve a static website. What solutions or 
# services could I use for that?
# 2. How would you do this in Python?
# 3. How would I extend the Python example
# so it can serve static http pages from a 
# directory and potential sub-directories instead 
# of just one page.

# abandoned in favor of caddy as way too slow

import os
import http.server
import http.client

# Initialize the IOTEMPOWER_LOCAL environment variable
iotempower_local = os.environ.get("IOTEMPOWER_LOCAL")
if iotempower_local is None:
    raise ValueError("IOTEMPOWER_LOCAL environment variable not set")
iotempower_html_path = os.path.join(iotempower_local,"doc","html")

class ReverseProxy(http.server.SimpleHTTPRequestHandler):
    # Define the target host and port for each URL prefix
    target_hosts = {
        "/nodered": ("localhost", 1880),
        "/cloudcmd": ("localhost", 8080)
    }

    def do_GET(self):
        global iotempower_html_path
        print("*** iotempower_html_path: " + iotempower_html_path)
        # Extract the URL prefix from the request path
        for prefix in self.target_hosts.keys():
            if self.path.startswith(prefix):
                # Build the target URL using the corresponding host and port
                target_host, target_port = self.target_hosts[prefix]
                target_path = self.path.replace(prefix, "")
                target_url = f"http://{target_host}:{target_port}{target_path}"
                # Create a new HTTP client and request the target URL
                client = http.client.HTTPConnection(target_host, target_port)
                client.request("GET", target_path)
                # Get the response from the target server and forward it to the client
                response = client.getresponse()
                self.send_response(response.status)
                for header, value in response.getheaders():
                    self.send_header(header, value)
                self.end_headers()
                self.wfile.write(response.read())
                return
        # If no URL prefix matches, serve a static file
        if self.path.endswith("/"):
            self.path += "index.html"
        if self.path.startswith("/"):
            file_path = os.path.join( iotempower_html_path, self.path[1:])
        else:
            file_path = os.path.join( iotempower_html_path, self.path)
        print("Checking: ", file_path)
        if os.path.exists(file_path):
            if os.path.isdir(file_path):
                self.path = os.path.join(self.path, "index.html")
            return http.server.SimpleHTTPRequestHandler.do_GET(self)
        else:
            self.send_error(404)


# change to the actual path to the directory containing the html files
os.chdir(iotempower_html_path)

# Start the server on port 40080
httpd = http.server.HTTPServer(("localhost", 40080), ReverseProxy)
httpd.serve_forever()
