#!/usr/bin/env bash

if [[ $# -ge 2 || "$*" = "help" || "$*" = "-h" || "$*" = "--help" ]]; then
cat << EOF
Syntax: prepare_build_dir [cache]

create_node_dir prepares the compilation directory for a specific node.
The build directory will be created if it does not exist.
If cache is given as a parameter, the build will be prepared so it links
into the compile cache and can be compiled in the cache, slightly modifying
the cache directory.

EOF
exit 1
fi

[ "$IOTEMPOWER_ACTIVE" = "yes" ] || { echo "IoTempower not active, aborting." 1>&2;exit 1; }

# TODO: remove dead links
# TODO: only do it when no other process is active on that dir

copy_type_through_base() {
    # $1: source directory
    # $2: type (folder to copy)
    # $3: destination directory
    # check if there is a base directory/link and recurse into it
    if [[ -d "$1/base" ]]; then
        copy_type_through_base "$1/base" "$2" "$3"
    fi
    if [[ -d "$1/$2" ]]; then # copy folder exists
        mkdir -p "$3" # make sure destination directory exists
        rsync -rL "$1/$2/" "$3/"
    fi
}

link_type_through_base() {
    # $1: source directory
    # $2: type (folder or file to copy/link)
    # $3: destination directory
    # check if there is a base directory/link and recurse into it
    if [[ -d "$1/base" ]]; then
        link_type_through_base "$1/base" "$2" "$3"
    fi
    if [[ -d "$1/$2" ]]; then # copy folder exists
        mkdir -p "$3" # make sure destination directory exists
        # make absolute links to everything in this directory
        ls "$1/$2" | while read f; do
            # TODO: do we have to check if this is a link and make it absolute first?
            p=$(realpath "$1/$2/$f")
            ln -s -f "$p" "$3/"
        done
    elif [[ -f "$1/$2" ]]; then # if it's a file
        # just link to that file
        p=$(realpath "$1/$2")
        ln -s -f "$p" "$3/"
    fi
}

if [[ -e "node.conf" ]]; then  # started from node-directory
    source "$IOTEMPOWER_ROOT/bin/read_node_config"
    node_type="$board"

    # echo DEBUG prepare_build_dir
    # echo $IOTEMPOWER_AP_NAME_FULL
    # echo $IOTEMPOWER_AP_NAME
    # echo $IOTEMPOWER_AP_PASSWORD
    # echo DEBUG prepare_build_dir END

    src_dir="$IOTEMPOWER_ROOT/lib/node_types/$node_type"
    dest_dir="build"
    
    # if [[ "$1" == "cache" ]]; then
    #     rm -rf "$dest_dir" &> /dev/null
    #     ln -f -s "$IOTEMPOWER_COMPILE_CACHE" "$dest_dir"
    #     # obsolet as we now compile everything in one dir and just update src
    #     # if [[ ! -e "$dest_dir/.pioenvs/$board" ]]; then # only create if not there yet
    #     #     rm -rf "$dest_dir/.piolibdeps" &>/dev/null
    #     #     ln -f -s "$IOTEMPOWER_COMPILE_CACHE/.piolibdeps" "$dest_dir/"
    #     #     if [[ "$board" ]]; then
    #     #         mkdir -p "$dest_dir/.pioenvs/$board"
    #     #         for file in $(ls "$IOTEMPOWER_COMPILE_CACHE/.pioenvs/$board"); do
    #     #             if [[ ! "$file" =~ ^(src|firmware.elf|firmware.bin|)$ ]]; then
    #     #                 ln -f -s "$IOTEMPOWER_COMPILE_CACHE/.pioenvs/$board/$file" \
    #     #                     "$dest_dir/.pioenvs/$board/"
    #     #             fi
    #     #         done
    #     #         rsync -r "$IOTEMPOWER_COMPILE_CACHE/.pioenvs/$board/src/" \
    #     #                     "$dest_dir/.pioenvs/$board/src/"
    #     #     fi
    #     # fi
    # else
    #   mkdir -p "$dest_dir"
    # fi
    
    # always create a cache-dir
    if [[ -L "$dest_dir" ]]; then
        rm "$dest_dir"
    fi
    mkdir -p "$dest_dir"
    
    link_type_through_base "$src_dir" src "$dest_dir/src"
    link_type_through_base "$src_dir" lib "$dest_dir/lib"
    link_type_through_base "$src_dir" platformio.ini "$dest_dir"
    link_type_through_base "$src_dir" pre_extra_script.py "$dest_dir"

    ln -s -f "$(realpath setup.cpp)" "$dest_dir/src/setup.h"
#    password=$(tail -n1 key.hex|head -c64|basez -x -d|md5sum -b|cut -d\  -f1)
    password=$(tail -n1 key.txt|head -c64|md5sum -b|cut -d\  -f1)
    fname="$dest_dir/src/key.h"
    echo 'const char *keyhash = "'"$password"'";' > "$fname.new"
    # only replace if it's new
    diff -q -f "$fname.new" "$fname" 2>/dev/null || mv "$fname.new" "$fname"
    rm -f "$fname.new"


    # create node-specific config file.
    fname="$dest_dir/src/config.h"
cat > "$fname.new" << EOF
#define HOSTNAME "$node_name"
#define mqtt_topic "$topic"
#define mqtt_server "$mqtt_server"
#define mqtt_user "$mqtt_user"
#define mqtt_password "$mqtt_password"
EOF
    # only replace if it's new
    diff -q -f "$fname.new" "$fname" 2>/dev/null || mv "$fname.new" "$fname"
    rm -f "$fname.new"

# we hardcode wifi credentials now to allow easier re-flashing and
# network migration
#    echo "// no wifi credentials" > "$dest_dir/src/wifi-config.h"
    fname="$dest_dir/src/wifi-config.h"
cat > "$fname.new" << EOF
#define WIFI_SSID "$IOTEMPOWER_AP_NAME_FULL"
#define WIFI_PASSWORD "$IOTEMPOWER_AP_PASSWORD"
EOF
    # only replace if it's new
    diff -q -f "$fname.new" "$fname" 2>/dev/null || mv "$fname.new" "$fname"
    rm -f "$fname.new"

else
    echo "Not in node directory."
    exit 1
fi
