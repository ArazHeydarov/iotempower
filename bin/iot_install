#!/usr/bin/env bash

# if not available, install all dependencies
# and also allow to fix shebangs in local bin folder
#
# check if everything from IOTEMPOWER_EXTERNAL is downloaded and accessable
# if not asks to install it
#
# if called as check_install clean, it will delete content of IOTEMPOWER_EXTERNAL and
# re-download everything
#
# Author: ulno
# Create date: 2017-05-17

[ "$IOTEMPOWER_ACTIVE" = "yes" ] || { echo "IoTempower not active, aborting." 1>&2;exit 1; }

function welcome() {
cat << EOF
IoTempower installer
====================

Welcome to the IoTempower environment installer. You are just a couple of steps
from setting up a very simple and accessible system to deploy your own
Internet of Things (IoT).

You need build-essential, virtualenv, git, hostapd, dnsmasq, iptables,
bridge-utils, python-dev, mosquitto-clients, haveged,
and a current nodejs installed.

On Ubuntu or Debian systems install these with:
sudo apt-get install build-essential git mosquitto-clients virtualenv iptables bridge-utils hostapd dnsmasq haveged python3-dev

Installing a current nodejs on debian, ubuntu, and raspberry os
is not trivial, best follow the instructions for the node install here:
https://github.com/nodesource/distributions/blob/master/README.md


Optionally you want the mqtt server mosquitto, midnight commander (mc),
the editor micro, and the fast simple webserver caddy.
You can install these with:
sudo apt-get install mc mosquitto micro caddy

EOF
}

function install_package_if_missing(){
  if [[ $(which "$1" 2>/dev/null) == "" ]]; then
    echo "$1 could not be found in your system, installing. Please wait..."
    apt-get install -y -q --no-install-recommends "$1"
    # check error and return 1 if not found
    if [[ $? != 0 ]]; then
      echo "$1 could not be installed, exiting now."
      exit 1
    fi
    echo "$1 has been installed successfully"
  fi
}

function echo_message_read_answer() {
    local question="$1"
    local default="${2:-y}" # Set 'y' as the default value if not provided
    local reply

    # Check default value to adjust the prompt accordingly
    case "$default" in
        y|Y)
            printf "%s (Y/n)? " "$question"
            ;;
        n|N)
            printf "%s (y/N)? " "$question"
            ;;
        *)
            echo "Invalid default value. Please use 'y' or 'n'."
            return 2
            ;;
    esac

    # Read the user input
    read -r reply
    reply="${reply:-$default}"

    # Return based on the user input or default
    case "$reply" in
        y|Y)
            return 1
            ;;
        n|N)
            return 0
            ;;
        *)
            echo "Invalid input. Please use 'y' or 'n'."
            ask_question "$question" "$default" # Ask again if invalid input
            ;;
    esac
}

function init_nodejs() {
    cd "$IOTEMPOWER_LOCAL" || { echo "$IOTEMPOWER_LOCAL not found, aborting." 1>&2;exit 1; }
    mkdir -p nodejs && cd nodejs || { echo "Can't create nodejs folder, aborting." 1>&2;exit 1; }
    # if package.json does not exist, run nmp init to create it

    npm init -y > /dev/null
}

function check_pi() {
  # check if this is a raspberry pi - TODO: seems not to work, verify
  vcgencmd version &> /dev/null
}

# make installers available in PATH
export PATH="$IOTEMPOWER_ROOT/lib/iot_installs:$PATH"

# Parsing options
help_string="Possible options:
      --clean: clears installations and starts a new environment
      --quiet: install all dependencies (optional & required)
      --upgrade: run an upgrade of all installed packages before starting
      --core: install IoTempower core (deployment and compilation environment)
      --cloudcmd: install Cloud Commander
      --node-red: install Node-RED
      --caddy: install Caddy
      --mqtt: install Mosquitto
      --convenience: install mc, micro, and tilde
      --templates: create iot-systems template
      --cache: pre-fill cache to accelerate compilations
      --fix-pi-wifi-ap: Fix Raspberry Pi wireless firmware for access point usage
      "
while getopts ":h-:" opt; do
  case $opt in
    h)
      echo "$help_string"
      exit 0;;
    -)
      case "${OPTARG}" in
        help)
          echo "$help_string"
          exit 0;;
        clean)
          clean=1;;
        quiet)
          quiet=1;;
        upgrade)
          answer_upgrade=1;;
        core)
          answer_core=1;;
        cloudcmd)
          answer_commander=1;;
        node-red)
          answer_node_red=1;;
        caddy)
          answer_caddy=1;;
        mqtt)
          answer_mqtt=1;;
        convenience)
          answer_convenience=1;;
        templates)
          answer_templates=1;;
        cache)
          answer_cache=1;;
        fix-pi-wifi-ap)
          answer_fix_pi_wifi_ap=1;;
        *)
          echo "Invalid option: --${OPTARG}"
          exit 1;;
      esac
      ;;
    \?)
      echo "Invalid option: -$OPTARG"
      exit 1;;
  esac
done


if [[ "$clean" == 1 ]]; then
  echo "Deleting external cache."
  echo
  rm -rf "$IOTEMPOWER_VPYTHON"
  rm -rf "$IOTEMPOWER_EXTERNAL"
fi

# check if virtualenv is configured
if [[ -e "$IOTEMPOWER_VPYTHON/bin/activate" ]]; then # check for existing venv
    source "$IOTEMPOWER_VPYTHON/bin/activate"
else
	if [[ "$quiet" == 1 ]]; then
		answer_core=1
		answer_commander=1
		answer_node_red=1
		answer_caddy=1
		answer_mqtt=1
    if check_pi; then
      answer_fix_pi_wifi_ap=1
    else
  		answer_fix_pi_wifi_ap=0
    fi
    answer_convenience=1
    answer_templates=1
    answer_cache=0
    answer_upgrade=1
	else
    welcome
    echo_message_read_answer "Do you want to set up IoTempower core (compilation and deployment environment)"
    answer_core=$?
    optional_message="Do you want to install the optional dependency"
    if [ -z "$answer_commander" ] && [ -z "$answer_node_red" ] &&
        [ -z "$answer_caddy" ] && [ -z "$answer_mqtt" ] && [ -z "$answer_fix_pi_wifi_ap" ]; then
      echo_message_read_answer "${optional_message} CLOUD COMMANDER (Details -> https://cloudcmd.io/)"
      answer_commander=$?

      echo_message_read_answer "${optional_message} NODE-RED (Details -> https://nodered.org/)"
      answer_node_red=$?

      echo_message_read_answer "${optional_message} CADDY (Details -> https://caddyserver.com/)"
      answer_caddy=$?

      echo_message_read_answer "${optional_message} MOSQUITTO (MQTT broker) (Details -> https://mosquitto.org/)"
      answer_mqtt=$?

      echo_message_read_answer "${optional_message} convenience tools (tmux, mc, micro, tilde, elinks)"
      answer_convenience=$?

      echo_message_read_answer "Do you want to setup the iot-systems template folder"
      answer_templates=$?

      echo_message_read_answer "$(printf "%b" \
        "Do you want to pre-populate the compile cache to\n" \
        "accelerate future compilations (can take a long time)." \
        )" n
      answer_cache=$?

      if check_pi; then
        # activate minimal firmware
        echo_message_read_answer "$(printf "%b\n" \
          "In order to support a larger amount of connected devices,"\
          "on the raspberry pi a special minimal version"\
          "of the wireless chip firmware has to be enabled."\
          "NB! A maximum of 8 connected clients are supported"\
          "without the use of minimal broadcom firmware."\
          "Do you want to install the fixed firmware?")"
        answer_fix_pi_wifi_ap=$?
      fi

      echo_message_read_answer "Do you want to upgrade all packages before the installation starts"
      answer_upgrade=$?

    fi
  fi



  # make sure package lists are uptodate
  echo "Updating package lists..."
  call_by_system update
  echo "Updating package lists done."
  echo

  if [[ "$answer_upgrade" == 1 ]]; then
    call_by_system upgrade
    echo
  fi

  if [[ "$answer_core" == 1 ]]; then
    if ! call_by_system install-general; then
      echo "Installation of general requirements failed. Aborting installation."
      exit 1
    fi
    # python2 seems not to be necessary anymore
    # # TODO: recheck, installation seems to fail first time -> path problems (wrong pip used?)
    # # install virtualenv for python2 for platformio
    # mkdir -p "$IOTEMPOWER_VPYTHON2"
    # virtualenv -p "$(which python2)" "$IOTEMPOWER_VPYTHON2"
    # source "$IOTEMPOWER_VPYTHON2/bin/activate"
    # pip install --upgrade pip
    #    pip install --upgrade platformio
    # TODO: go back to normal install, but for now we need version4 (development version)
    # pip install --upgrade https://github.com/platformio/platformio-core/archive/develop.zip
    # deactivate # disable python 2 environment

    # install virtualenv
    python3 -m venv --system-site-packages "$IOTEMPOWER_VPYTHON"
    source "$IOTEMPOWER_VPYTHON/bin/activate"
    pip install --no-cache-dir --upgrade pip
    # dependencies
    pip install --no-cache-dir -r "$IOTEMPOWER_ROOT/lib/iot_installs/requirements.txt"

    # access point - TODO: make this optional
    git clone https://github.com/ulno/create_ap "$IOTEMPOWER_EXTERNAL/create_ap"
    #cd "$IOTEMPOWER_EXTERNAL/create_ap"

    # install node.js related stuff
    init_nodejs
    npm install terminal-kit

    echo "All core packages have been installed. The rest consists of optional packages."
  fi # core

  if [[ "$answer_commander" == 1 ]]; then
    init_nodejs
    echo "Installing Cloud Commander"
    # apt-get install g++ -y - Obsolete: should be in build-essential or default on arch
    npm install gritty
    npm install cloudcmd
    # copy menu files
    cp -a "$IOTEMPOWER_ROOT/lib/gateway_setup/cloudcmd/cloudcmd.menu.js" "$HOME/.cloudcmd.menu.js"
    cp -a "$IOTEMPOWER_ROOT/lib/gateway_setup/cloudcmd/cloudcmd.json" "$HOME/.cloudcmd.json"

    cloudcmd_config=~/.cloudcmd.json
    jq "$(printf "%s" \
        '.auth = true | '\
        '.prefix = "/cloudcmd" | '\
        '.username = "iot" | '\
        '.password = "709d553e1a6e0b3f874408865d169870a945ceb25d72be561b7a50a23713d3452aea896e8e24783adcce86fddba087939ae3da9574997334e6362b5e767aa68a" | '\
        '.algo = "sha512WithRSAEncryption"'\
      )" \
      "$cloudcmd_config" > "$cloudcmd_config.new" \
    || { echo "jq failed, aborting." 1>&2;exit 1; }
    mv "$cloudcmd_config" "$cloudcmd_config.backup" &>/dev/null
    mv "$cloudcmd_config.new" "$cloudcmd_config"

    cloudcmd --terminal --terminal-path "$(gritty --path)" --save --no-server
  fi # commander

  if [[ "$answer_node_red" == 1 ]]; then
    init_nodejs
    echo "Installing Node Red"
    npm install --unsafe-perm node-red
    mkdir -p "$HOME/.node-red"
    cp "$IOTEMPOWER_LOCAL"/nodejs/node_modules/node-red/settings.js "$HOME/.node-red/"
    nodered_config=~/.node-red/settings.js

    if ! grep -q "module.exports.httpAdminRoot = '/nodered';" "$nodered_config" ; then
      cat << EOF >> "$nodered_config"
module.exports.httpAdminRoot = '/nodered';
module.exports.httpNodeRoot = '/nodered';
module.exports.adminAuth= {
  type: "credentials",
  users: [{
      username: "admin",
      password: "\$2b\$08\$W5LDP3eTaIYjz5iJkKVwMu9JDg3cPFMUvBypMCmYA3fpjYQlzFC4e",
      permissions: "*"
  }]
};
EOF
      echo "Changed $nodered_config."
    fi # node-red config

  fi # node-red

  if [[ "$answer_caddy" == 1 ]]; then
    echo "Installing Caddy"
    call_by_system install-caddy
  fi # caddy

  if [[ "$answer_mqtt" == 1 ]]; then
    echo "Installing Mosquitto"
    call_by_system install-mosquitto
  fi # mosquitto

  if [[ "$answer_convenience" == 1 ]]; then
    echo "Installing convenience tools"
    call_by_system install-other tmux mc micro tilde elinks
    # consider installing convenience settings for mc (add user-menu to it)
  fi # convenience

  if [[ "$answer_templates" == 1 ]]; then
    echo "Creating iot-systems folder from template"
    if [ ! -d "iot-systems" ]; then
      cp -a "$IOTEMPOWER_ROOT/examples/iot-systems-template" "$HOME/iot-systems"
    else
      echo "iot-systems already exists."
    fi # iot-systems exist?
  fi # templates
  
  if [[ "$answer_fix_pi_wifi_ap" == 1 ]]; then
    echo "Fix pi wifi ap firmware for more clients."
    unbreak_ap_limit # TODO: integrate correctly, and check if we are on the pi
  fi # fix wifi raspi

  # fix shebangs for environments like termux
  bash "$IOTEMPOWER_ROOT/bin/fix_bin"

  # activate iot script
  iot_activate_iot_script

  if [[ "$answer_cache" == 1 ]]; then
    # populate the cache TODO: potentially integrate with testing
    update_cache
  fi # cache

  # compile man-pages and html-pages of documentation
  iot_doc make
  
  # add permissions to access serial port for current user
  iot_add_serial_permissions

  # Save the state
  python3 "$IOTEMPOWER_ROOT"/utils/save_arguments_as_json.py --splitter '=' --path "$IOTEMPOWER_LOCAL"/installation_options.json \
    core="$answer_core" cloud_commander="$answer_commander" \
    node_red="$answer_node_red" caddy="$answer_caddy" \
    mosquitto="$answer_mqtt" answer_fix_pi_wifi_ap="$answer_fix_pi_wifi_ap" \
    convenience="$answer_convenience" templates="$answer_templates" \
    cache="$answer_cache"

  # Testing the installation
  if ! pytest "$IOTEMPOWER_ROOT"/tests/test_installations.py;
  then
    exit 1
  fi
fi

exit 0