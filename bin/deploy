#!/bin/bash
if [[ $# -gt 4 || "$*" = "help" || "$*" = "-h" || "$*" = "--help" ]]; then
cat << EOF
Syntax: deploy [<node-address> [key]
               |compile
               |adopt <uiot-node-id-nL-mS>
               |[adopt] serial [port] [force]
               ]

deploy must be called from a node directory (or one of its parent system
directories) and reads its configuration from there.

It rebuilds firmwares for the affected nodes and remotely flashes
the respected nodes.

If a node-address is given (for example as an IP), deploy will flash the 
node with that respective address remotely. If also a password is given, then
this password is used instead of the specific node password. This can be
important to re-initialize a node configured for a different system.

If compile is specified, deploy only tries to compile the respective node
firmware. 

If adopt serial is specified, a locally (via serial) connected node will
be flashed. With port the serial port can optionally be specified. It will
overwrite (re-flash) all settings and initial parameters of the locally
connected node. Without specifying force

If adopt is given with a network in of the form uiot-node-id-nL-mS, 
a single node on the network that is in configuration mode
will be overwritten with the current configuration and adopted as a new node
in the current network.
For this adoption process, it is using a locally connected IoTempower esp dongle.
It will not work if no dongle is locally connected.
The respective board has to be in configuration/adopt mode (this mode
is usually triggered via pressing and releasing the flash key twice during
its five second power-up phase).

If deploy is called from a node's parent folder, it deploys all nodes in
subdirectories of this parent folder.

If key is given, it overrides the deduced flash-key.

port: can be empty to search for connected device, usb0, usb1, or acm0, acm1, ...
EOF
exit 1
fi

# TODO: add option to specify input file with list of specific nodes to deploy

[ "$IOTEMPOWER_ACTIVE" = "yes" ] || { echo "IoTempower not active, aborting." 1>&2;exit 1; }

export IOTEMPOWER_DEPLOY=active

# use tmp directory as refreshed at restart/crash
if [[ -z "$TMPDIR" ]]; then
    TMPDIR="/tmp"
fi
LOCK="$TMPDIR/.net.ulno.iotempower.deploy_lock"

FAILED_NODES="failed_nodes.txt"

if [[ -e "node.conf" ]]; then  # started from node-directory
    flock -n -e -E 50 "$LOCK" deploy_single "$@"
    result=$?
    if [[ $resulth -eq 50 ]]; then
        echo "Only one deploy process can be run at the same time,"
        echo "make sure the other process finishes first."
        exit 1
    fi
    exit $result

else # started from somewhere else, so search for node.conf in subdirs

    # first search if there is a system.conf, exit if not
    source "$IOTEMPOWER_ROOT/bin/read_system_config"


    path="$(pwd)"
    echo "This is not a node, so search sub-folders for node.conf files and"
    echo "deploy all of them."
    echo
    if [[ "$*" ]]; then
        echo "deploying of multiple nodes only works if no parameters are specified."
        exit 1
    fi
    
    rm -f "$FAILED_NODES"

    # TODO: think about running them all in parallel (or batches)
    find -name node.conf |\
        while read n; do
            cd "$path"
            cd $(dirname "$n")
            deploy # call recursive for node-dir
            result=$?
            cd "$path"
            if [[ $result -ne 0 ]]; then # failed
                echo $(dirname "$n") >> "$FAILED_NODES"
            fi
        done

    cd "$path"

    if [[ -e "$FAILED_NODES" ]]; then
        echo "The following nodes failed to deploy."
        cat "$FAILED_NODES"
        echo "Check log above for specific problems."
        echo "List of failed nodes is in the file $FAILED_NODES."
        exit 1
    fi

    echo "All nodes successfully deployed."
    exit 0

fi # not in node-dir