#!/usr/bin/env bash

# if not available, install all dependencies
# and also allow to fix shebangs in local bin folder
#
# check if everything from IOTEMPOWER_EXTERNAL is downloaded and accessable
# if not asks to install it
#
# if called as check_install clean, it will delete content of IOTEMPOWER_EXTERNAL and
# re-download everything
#
# Author: ulno
# Create date: 2017-05-17

[ "$IOTEMPOWER_ACTIVE" = "yes" ] || { echo "IoTempower not active, aborting." 1>&2;exit 1; }

function welcome() {
cat << EOF
IoTempower installer
====================

Welcome to the IoTempower environment installer. You are just a couple of steps
from setting up a very simple and accessible system to deploy your own
Internet of Things (IoT).

You need build-essential, virtualenv, git, hostapd, dnsmasq, iptables,
bridge-utils, python-dev, mosquitto-clients, haveged,
and a current nodejs installed.

On Ubuntu or Debian systems install these with:
sudo apt-get install build-essential git mosquitto-clients virtualenv iptables bridge-utils hostapd dnsmasq haveged python3-dev

Installing a current nodejs on debian, ubuntu, and raspberry os
is not trivial, best follow the instructions for the node install here:
https://github.com/nodesource/distributions/blob/master/README.md


Optionally you want the mqtt server mosquitto, midnight commander (mc),
the editor micro, and the fast simple webserver caddy.
You can install these with:
sudo apt-get install mc mosquitto micro caddy

Do you want to set it up? (Y/n)
EOF
}

function install_package_if_missing(){
  if [[ $(which "$1" 2>/dev/null) == "" ]]; then
    echo "$1 could not be found in your system, installing. Please wait..."
    apt-get install -y -q --no-install-recommends "$1"
    # check error and return 1 if not found
    if [[ $? != 0 ]]; then
      echo "$1 could not be installed, exiting now."
      exit 1
    fi
    echo "$1 has been installed successfully"
  fi
}

function echo_message_read_answer(){
  if [[ "$1" != "" ]]; then
  echo "$1"
  fi
  read -r temp_answer
    if [[ "$temp_answer" == "y" ||  "$temp_answer" == "Y" || "$temp_answer" == "" ]]; then
      return 1
    fi
    return 0
}

# Parsing options
help_string="Possible options:
      --clean: clears installations and starts a new environment
      --quiet: install all dependencies (optional & required)
      --cloudcmd: install Cloud Commander
      --node-red: install Node-RED
      --caddy: install Caddy
      --mqtt: install Mosquitto
      --fix-pi-wifi-ap: Fix Raspberry Pi wireless firmware for access point usage
      "
while getopts ":h-:" opt; do
  case $opt in
    h)
      echo "$help_string"
      exit 0
      ;;
    -)
      case "${OPTARG}" in
        help)
          echo "$help_string"
          exit 0;;
        clean)
          clean=1;;
        quiet)
          quiet=1;;
        cloudcmd)
          answer_commander=1;;
        node-red)
          answer_node_red=1;;
        caddy)
          answer_caddy=1;;
        mqtt)
          answer_mqtt=1;;
        fix-pi-wifi-ap)
          answer_fix_pi_wifi_ap=1;;
        *)
          echo "Invalid option: --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    \?)
      echo "Invalid option: -$OPTARG"
      exit 1
      ;;
  esac
done


if [[ "$clean" == 1 ]]; then
  echo "Deleting external cache."
  echo
  rm -rf "$IOTEMPOWER_VPYTHON"
  rm -rf "$IOTEMPOWER_EXTERNAL"
fi

# check if virtualenv is configured
if [[ -e "$IOTEMPOWER_VPYTHON/bin/activate" ]]; then # check for existing venv
    source "$IOTEMPOWER_VPYTHON/bin/activate"
else
	if [[ "$quiet" == 1 ]]; then
		answer=1
		answer_commander=1
		answer_node_red=1
		answer_caddy=1
		answer_mqtt=1
		answer_fix_pi_wifi_ap=1
	else
	    welcome
      echo_message_read_answer ""
      answer=$?
    	optional_message="Do you want to install optional dependency"
      if [ -z "$answer_commander" ] && [ -z "$answer_node_red" ] &&
         [ -z "$answer_caddy" ] && [ -z "$answer_mqtt" ] && [ -z "$answer_fix_pi_wifi_ap" ]; then
      echo_message_read_answer "${optional_message} CLOUD COMMANDER (Details -> https://cloudcmd.io/)? (Y/n)"
      answer_commander=$?

      echo_message_read_answer "${optional_message} NODE-RED (Details -> https://nodered.org/)? (Y/n)"
      answer_node_red=$?

      echo_message_read_answer "${optional_message} CADDY (Details -> https://caddyserver.com/)? (Y/n)"
      answer_caddy=$?

      echo_message_read_answer "${optional_message} MOSQUITTO (MQTT broker) (Details -> https://mosquitto.org/)? (Y/n)"
      answer_mqtt=$?

      # activate minimal firmware
      echo_message_read_answer "In order to support a larger amount of connected devices, a special minimal version
            of the wireless chip firmware has to be enabled.
            NB! A maximum of 8 connected clients are supported without the use of minimal broadcom firmware.
            Do you want to proceed? (Y/n)"
      answer_fix_pi_wifi_ap=$?
      fi
    fi
    if [[ "$answer" == 1 ]]; then
      echo "Installing general packages"
      install_package_if_missing "apt-utils"
      install_package_if_missing "make"
      install_package_if_missing "git"
      install_package_if_missing "python3.11-venv"
      install_package_if_missing "python3-dev"
      install_package_if_missing "gcc-aarch64-linux-gnu"
      install_package_if_missing "jq"
      install_package_if_missing "haveged"
    else
        echo "Can't continue, exiting now."
        exit 1
    fi
    # python2 seems not to be necessary anymore
    # # TODO: recheck, installation seems to fail first time -> path problems (wrong pip used?)
    # # install virtualenv for python2 for platformio
    # mkdir -p "$IOTEMPOWER_VPYTHON2"
    # virtualenv -p "$(which python2)" "$IOTEMPOWER_VPYTHON2"
    # source "$IOTEMPOWER_VPYTHON2/bin/activate"
    # pip install --upgrade pip
    #    pip install --upgrade platformio
    # TODO: go back to normal install, but for now we need version4 (development version)
    # pip install --upgrade https://github.com/platformio/platformio-core/archive/develop.zip
    # deactivate # disable python 2 environment

    # install virtualenv
    python3 -m venv "$IOTEMPOWER_VPYTHON"
    source "$IOTEMPOWER_VPYTHON/bin/activate"
    pip install --no-cache-dir --upgrade pip
    # dependencies
    pip install --no-cache-dir -r "$IOTEMPOWER_ROOT/bin/requirements.txt"

    # access point
    git clone https://github.com/ulno/create_ap "$IOTEMPOWER_EXTERNAL/create_ap"
    #cd "$IOTEMPOWER_EXTERNAL/create_ap"

    # install node.js
    cd "$IOTEMPOWER_LOCAL" || exit
    mkdir nodejs && cd nodejs || exit
    install_package_if_missing "curl"
    curl -fsSL https://deb.nodesource.com/setup_21.x | bash - && apt-get install -y nodejs

    # install node.js related stuff
    npm install terminal-kit

    echo "All necessary packages have been installed the rest is optional packages."

    if [[ "$answer_commander" == 1 ]]; then
      echo "Installing Cloud Commander"
      apt-get install g++ -y
      npm install gritty
      npm install cloudcmd
      cloudcmd --terminal --terminal-path "$(gritty --path)" --save --no-server
    fi

    if [[ "$answer_node_red" == 1 ]]; then
      echo "Installing Node Red"
      npm install --unsafe-perm node-red
      mkdir ~/.node-red/
      cp "$IOTEMPOWER_LOCAL"/nodejs/node_modules/node-red/settings.js ~/.node-red/
    fi

    if [[ "$answer_caddy" == 1 ]]; then
      echo "Installing Caddy"
      apt-get install -y debian-keyring debian-archive-keyring apt-transport-https
      curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
      curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | tee /etc/apt/sources.list.d/caddy-stable.list
      apt-get update
      apt-get install caddy
    fi

    if [[ "$answer_mqtt" == 1 ]]; then
      echo "Installing Mosquito"
      apt-get install mosquitto-clients -y
      apt-get install mosquitto -y
    fi

    if [[ "$answer_fix_pi_wifi_ap" == 1 ]]; then
      echo "Fix pi wifi ap firmware for more clients."
      # unbreak_ap_limit TODO: find function and integrate correctly
    fi

    bash "$IOTEMPOWER_ROOT/bin/fix_bin"

    update_cache

    iot doc make
    # Save the state
    python3 "$IOTEMPOWER_ROOT"/utils/save_arguments_as_json.py --splitter '=' --path "$IOTEMPOWER_LOCAL"/installation_options.json \
    general="$answer" cloud_commander="$answer_commander" \
     node_red="$answer_node_red" caddy="$answer_caddy" \
     mosquitto="$answer_mqtt" answer_fix_pi_wifi_ap="$answer_fix_pi_wifi_ap"

    # Testing the installation
    if ! pytest "$IOTEMPOWER_ROOT"/tests/test_installations.py;
    then
     exit 1
    fi
fi

exit 0